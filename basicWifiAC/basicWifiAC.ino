/*
 *  This sketch demonstrates how to set up a simple HTTP-like server.
 *  The server will set a GPIO pin depending on the request
 *    http://server_ip/gpio/0 will set the GPIO2 low,
 *    http://server_ip/gpio/1 will set the GPIO2 high
 *  server_ip is the IP address of the ESP8266 module, will be 
 *  printed to Serial when the module is connected.
 */

#include <ESP8266WiFi.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <IRrecv.h>
#include <IRutils.h>


uint16_t stopAir[]={0x235A,0x1130,0x1C2,0x6D6,0x1C2,0x6D6,0x1F4,0x28A,0x1C2,0x2BC,0x1C2,0x2BC,0x190,0x2BC,0x1C2,0x2BC,0x15E,0x73A,0x190,0x73A,0x15E,0x2EE,0x190,0x2EE,0x15E,0x2EE,0x190,0x320,0x12C,0x76C,0x12C,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x73A,0x15E,0x320,0x15E,0x73A,0x15E,0x76C,0x15E,0x76C,0x15E,0x2EE,0x15E,0x320,0x12C,0x320,0x190,0x2EE,0x12C,0x76C,0x15E,0x73A,0x15E,0x320,0x15E,0x76C,0x15E,0x73A,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x73A,0x15E,0x76C,0x15E,0x320,0x12C,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x320,0x12C,0x320,0x15E,0x320,0x15E,0x320,0x12C,0x320,0x15E,0x320,0x12C,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x73A,0x15E,0x76C,0x190,0x2EE,0x15E,0x320,0x12C,0x320,0x15E,0x320,0x15E};
uint16_t startWith24Heat[]={0x22C4,0x11F8,0x12C,0x76C,0x15E,0x73A,0x15E,0x320,0x12C,0x76C,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x12C,0x76C,0x15E,0x76C,0x12C,0x320,0x15E,0x320,0x12C,0x320,0x15E,0x320,0x12C,0x76C,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x73A,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x12C,0x76C,0x15E,0x76C,0x12C,0x320,0x15E,0x76C,0x15E,0x73A,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x73A,0x15E,0x76C,0x15E,0x320,0x15E,0x2EE,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x320,0x15E,0x2EE,0x15E,0x320,0x15E,0x2EE,0x190,0x2EE,0x15E,0x320,0x15E,0x2EE,0x15E,0x2EE,0x190,0x320,0x15E,0x2EE,0x15E,0x73A,0x15E,0x73A,0x1C2,0x2EE,0x15E,0x2EE,0x190,0x2EE,0x15E,0x2EE,0x190};
IRsend irsend(4);
const char* ssid = "PandoraBox-hhehe";
const char* password = "taobao#1";

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);

void setup() {
  irsend.begin();
  Serial.begin(115200);
  delay(10);

  // prepare GPIO2
  pinMode(2, OUTPUT);
  digitalWrite(2, 1);
  
  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void sendCode(uint16_t rawCodes[]){
  irsend.sendRaw(rawCodes, 147, 38);
  Serial.println("Sent!");
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
  
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  String result;
  Serial.println(req);
  client.flush();
  
  // Match the request
  if (req.indexOf("/ac/on") != -1){
    sendCode(startWith24Heat);
    result="started!";
  }else if (req.indexOf("/ac/off") != -1){
    sendCode(stopAir);
    result="stoped!";
  }else {
    Serial.println("invalid request");
    client.stop();
    return;
  }
  
  client.flush();

  // Prepare the response
  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nac ";
  s += result;
  s += "</html>\n";

  // Send the response to the client
  client.print(s);
  delay(1);
  Serial.println("Client disonnected");

  // The client will actually be disconnected 
  // when the function returns and 'client' object is detroyed
}

